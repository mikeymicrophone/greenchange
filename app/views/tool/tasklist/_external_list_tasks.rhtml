<%
  # this is used by "external" views/controllers to display a list of tasks.
  # for example, from people, groups, me. 
  # in these cases, the task lists are often indirectly fetched from the db. 

  # local variables
  @show_status ||= 'pending'  # one of pending, completed, both
  @show_user   ||= @user # unless false, only show tasks for this user.
  all_users  = (@show_user == 'all')
  all_states = (@show_status == 'both')
  completed  = (@show_status == 'completed')
  sortable_lists = {}
-%>
<% for @list in @task_lists
     @page = @list.page;
     sort_list_id = "sort_list_#{@page.id}_pending" # must begin with 'sort_list_'
     sortable_lists[sort_list_id] = @page
     tasks = @list.tasks.select do |t|
        (all_users || t.user_ids.include?(@show_user.id)) && (all_states || t.completed? == completed)
     end
     next unless tasks.any?
     tasks = tasks.sort do |t1,t2|
       if t1.completed? == t2.completed?
         t1.position <=> t2.position
       else
         t1.completed? <=> t2.completed?
       end
     end
  -%>
  <div><b><%= link_to @page.title, page_url(@page) %></b> <%= "(#{link_to_group(@page.group_name, :action => 'tasks')})" if @page.group_name %></div>
  <ul id='<%=sort_list_id%>' class='task_list'>
    <%= render :partial => 'tool/tasklist/task', :collection => tasks %>
  </ul>
<% end -%>
<%= sortable_lists.collect do |id, page|
  sortable_element id, :handle => 'handle', :url => page_xurl(page, :action=>'sort'), :containment => sortable_lists.keys
end %>

<%# this is just here so that we don't get an ajax error when a task is marked completed or pending -%>
<ul id='sort_list_completed' style='display:none'></ul>
<ul id='sort_list_pending' style='display:none'></ul>

